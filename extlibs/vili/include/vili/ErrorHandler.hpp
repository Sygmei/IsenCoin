#pragma once

#include <string>
#include <vector>
#include <map>
#include <iostream>
#include <exception>

namespace aube
{
    /**
     * \brief An ErrorMessage Class
     * @Bind
     */
    class ErrorMessage
    {
    private:
        std::vector<std::string> m_location;
        std::string m_message;
        std::vector<std::string> m_hints;
    public:
        /**
         * \brief Creates a new ErrorMessage
         * \param location Location of the ErrorMessage when raised
         * \param message Message displayed when the ErrorMessage is raised
         * \param hints Optional hints to remove the Error
         */
        ErrorMessage(const std::vector<std::string>& location, const std::string& message, const std::vector<std::string>& hints = {});
        /**
         * \brief Gets the location of the error in the code
         * \return A std::string containing the location of the error in the code
         */
        std::string getLocation();
        /**
         * \brief Gets the message displayed by the ErrorMessage when raised
         * \return A std::string containing the message displayed by the ErrorMessage when raised
         */
        std::string getMessage() const;
        /**
         * \brief Gets hints that can help the error resolution
         * \return A std::vector of std::string that are hints that can help the error resolution
         */
        std::vector<std::string> getHints() const;
    };

    /**
     * \brief Handles Errors in Vili
     * @Bind
     */
    class ErrorHandler
    {
    private:
        static std::map<std::string, ErrorMessage*> m_errors;
    public:
        /**
         * \brief Loads an ErrorMessage into the Aube Error Database (AED)
         * \param errorId Id of the ErrorMessage
         * \param location Location of the ErrorMessage when raised
         * \param message Message displayed when the ErrorMessage is raised
         * \param hints Optional hints to remove the Error
         */
        static void Load(const std::string& errorId, const std::vector<std::string>& location, const std::string& message, const std::vector<std::string>& hints = {});
        /**
         * \brief Raises an Error loaded in the Aube Error Database (AED)
         * \param errorId Id of the Error to raise
         * \param parameters Parameters injected to the ErrorMessage
         * \return A std::runtime_error generated by the ErrorMessage
         */
        static std::runtime_error Raise(const std::string& errorId, const std::map<std::string, std::string>& parameters = {});

        static void Warn(const std::string& errorId, const std::map<std::string, std::string>& parameters = {});
    };

    /**
     * \brief Loads all Aube Errors located in the given path
     * \param errorFile File where to load Aube Errors
     */
    void LoadErrors(const std::string& errorFile);
}
