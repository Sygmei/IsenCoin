// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Serialization.proto

#ifndef PROTOBUF_Serialization_2eproto__INCLUDED
#define PROTOBUF_Serialization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Serialization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTransactionSerImpl();
void InitDefaultsTransactionSer();
void InitDefaultsBlockSerImpl();
void InitDefaultsBlockSer();
void InitDefaultsFileSerImpl();
void InitDefaultsFileSer();
inline void InitDefaults() {
  InitDefaultsTransactionSer();
  InitDefaultsBlockSer();
  InitDefaultsFileSer();
}
}  // namespace protobuf_Serialization_2eproto
class BlockSer;
class BlockSerDefaultTypeInternal;
extern BlockSerDefaultTypeInternal _BlockSer_default_instance_;
class FileSer;
class FileSerDefaultTypeInternal;
extern FileSerDefaultTypeInternal _FileSer_default_instance_;
class TransactionSer;
class TransactionSerDefaultTypeInternal;
extern TransactionSerDefaultTypeInternal _TransactionSer_default_instance_;

// ===================================================================

class TransactionSer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TransactionSer) */ {
 public:
  TransactionSer();
  virtual ~TransactionSer();

  TransactionSer(const TransactionSer& from);

  inline TransactionSer& operator=(const TransactionSer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionSer(TransactionSer&& from) noexcept
    : TransactionSer() {
    *this = ::std::move(from);
  }

  inline TransactionSer& operator=(TransactionSer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionSer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionSer* internal_default_instance() {
    return reinterpret_cast<const TransactionSer*>(
               &_TransactionSer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransactionSer* other);
  friend void swap(TransactionSer& a, TransactionSer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionSer* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionSer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionSer& from);
  void MergeFrom(const TransactionSer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionSer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // bytes receiver = 2;
  void clear_receiver();
  static const int kReceiverFieldNumber = 2;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const void* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // bytes signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // uint32 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // float amout = 4;
  void clear_amout();
  static const int kAmoutFieldNumber = 4;
  float amout() const;
  void set_amout(float value);

  // @@protoc_insertion_point(class_scope:TransactionSer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::uint32 timestamp_;
  float amout_;
  mutable int _cached_size_;
  friend struct ::protobuf_Serialization_2eproto::TableStruct;
  friend void ::protobuf_Serialization_2eproto::InitDefaultsTransactionSerImpl();
};
// -------------------------------------------------------------------

class BlockSer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlockSer) */ {
 public:
  BlockSer();
  virtual ~BlockSer();

  BlockSer(const BlockSer& from);

  inline BlockSer& operator=(const BlockSer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockSer(BlockSer&& from) noexcept
    : BlockSer() {
    *this = ::std::move(from);
  }

  inline BlockSer& operator=(BlockSer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockSer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockSer* internal_default_instance() {
    return reinterpret_cast<const BlockSer*>(
               &_BlockSer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BlockSer* other);
  friend void swap(BlockSer& a, BlockSer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockSer* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockSer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockSer& from);
  void MergeFrom(const BlockSer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockSer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TransactionSer transaction = 1;
  int transaction_size() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::TransactionSer& transaction(int index) const;
  ::TransactionSer* mutable_transaction(int index);
  ::TransactionSer* add_transaction();
  ::google::protobuf::RepeatedPtrField< ::TransactionSer >*
      mutable_transaction();
  const ::google::protobuf::RepeatedPtrField< ::TransactionSer >&
      transaction() const;

  // int32 current_hash = 2;
  void clear_current_hash();
  static const int kCurrentHashFieldNumber = 2;
  ::google::protobuf::int32 current_hash() const;
  void set_current_hash(::google::protobuf::int32 value);

  // int32 previous_hash = 3;
  void clear_previous_hash();
  static const int kPreviousHashFieldNumber = 3;
  ::google::protobuf::int32 previous_hash() const;
  void set_previous_hash(::google::protobuf::int32 value);

  // int32 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BlockSer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TransactionSer > transaction_;
  ::google::protobuf::int32 current_hash_;
  ::google::protobuf::int32 previous_hash_;
  ::google::protobuf::int32 time_;
  mutable int _cached_size_;
  friend struct ::protobuf_Serialization_2eproto::TableStruct;
  friend void ::protobuf_Serialization_2eproto::InitDefaultsBlockSerImpl();
};
// -------------------------------------------------------------------

class FileSer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileSer) */ {
 public:
  FileSer();
  virtual ~FileSer();

  FileSer(const FileSer& from);

  inline FileSer& operator=(const FileSer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileSer(FileSer&& from) noexcept
    : FileSer() {
    *this = ::std::move(from);
  }

  inline FileSer& operator=(FileSer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileSer* internal_default_instance() {
    return reinterpret_cast<const FileSer*>(
               &_FileSer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FileSer* other);
  friend void swap(FileSer& a, FileSer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileSer* New() const PROTOBUF_FINAL { return New(NULL); }

  FileSer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileSer& from);
  void MergeFrom(const FileSer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileSer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BlockSer block = 1;
  int block_size() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::BlockSer& block(int index) const;
  ::BlockSer* mutable_block(int index);
  ::BlockSer* add_block();
  ::google::protobuf::RepeatedPtrField< ::BlockSer >*
      mutable_block();
  const ::google::protobuf::RepeatedPtrField< ::BlockSer >&
      block() const;

  // @@protoc_insertion_point(class_scope:FileSer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BlockSer > block_;
  mutable int _cached_size_;
  friend struct ::protobuf_Serialization_2eproto::TableStruct;
  friend void ::protobuf_Serialization_2eproto::InitDefaultsFileSerImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionSer

// bytes sender = 1;
inline void TransactionSer::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionSer::sender() const {
  // @@protoc_insertion_point(field_get:TransactionSer.sender)
  return sender_.GetNoArena();
}
inline void TransactionSer::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransactionSer.sender)
}
#if LANG_CXX11
inline void TransactionSer::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransactionSer.sender)
}
#endif
inline void TransactionSer::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransactionSer.sender)
}
inline void TransactionSer::set_sender(const void* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransactionSer.sender)
}
inline ::std::string* TransactionSer::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:TransactionSer.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionSer::release_sender() {
  // @@protoc_insertion_point(field_release:TransactionSer.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionSer::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:TransactionSer.sender)
}

// bytes receiver = 2;
inline void TransactionSer::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionSer::receiver() const {
  // @@protoc_insertion_point(field_get:TransactionSer.receiver)
  return receiver_.GetNoArena();
}
inline void TransactionSer::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransactionSer.receiver)
}
#if LANG_CXX11
inline void TransactionSer::set_receiver(::std::string&& value) {
  
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransactionSer.receiver)
}
#endif
inline void TransactionSer::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransactionSer.receiver)
}
inline void TransactionSer::set_receiver(const void* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransactionSer.receiver)
}
inline ::std::string* TransactionSer::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:TransactionSer.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionSer::release_receiver() {
  // @@protoc_insertion_point(field_release:TransactionSer.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionSer::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:TransactionSer.receiver)
}

// uint32 timestamp = 3;
inline void TransactionSer::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 TransactionSer::timestamp() const {
  // @@protoc_insertion_point(field_get:TransactionSer.timestamp)
  return timestamp_;
}
inline void TransactionSer::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TransactionSer.timestamp)
}

// float amout = 4;
inline void TransactionSer::clear_amout() {
  amout_ = 0;
}
inline float TransactionSer::amout() const {
  // @@protoc_insertion_point(field_get:TransactionSer.amout)
  return amout_;
}
inline void TransactionSer::set_amout(float value) {
  
  amout_ = value;
  // @@protoc_insertion_point(field_set:TransactionSer.amout)
}

// bytes signature = 5;
inline void TransactionSer::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionSer::signature() const {
  // @@protoc_insertion_point(field_get:TransactionSer.signature)
  return signature_.GetNoArena();
}
inline void TransactionSer::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransactionSer.signature)
}
#if LANG_CXX11
inline void TransactionSer::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransactionSer.signature)
}
#endif
inline void TransactionSer::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransactionSer.signature)
}
inline void TransactionSer::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransactionSer.signature)
}
inline ::std::string* TransactionSer::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:TransactionSer.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionSer::release_signature() {
  // @@protoc_insertion_point(field_release:TransactionSer.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionSer::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:TransactionSer.signature)
}

// -------------------------------------------------------------------

// BlockSer

// repeated .TransactionSer transaction = 1;
inline int BlockSer::transaction_size() const {
  return transaction_.size();
}
inline void BlockSer::clear_transaction() {
  transaction_.Clear();
}
inline const ::TransactionSer& BlockSer::transaction(int index) const {
  // @@protoc_insertion_point(field_get:BlockSer.transaction)
  return transaction_.Get(index);
}
inline ::TransactionSer* BlockSer::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:BlockSer.transaction)
  return transaction_.Mutable(index);
}
inline ::TransactionSer* BlockSer::add_transaction() {
  // @@protoc_insertion_point(field_add:BlockSer.transaction)
  return transaction_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TransactionSer >*
BlockSer::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:BlockSer.transaction)
  return &transaction_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TransactionSer >&
BlockSer::transaction() const {
  // @@protoc_insertion_point(field_list:BlockSer.transaction)
  return transaction_;
}

// int32 current_hash = 2;
inline void BlockSer::clear_current_hash() {
  current_hash_ = 0;
}
inline ::google::protobuf::int32 BlockSer::current_hash() const {
  // @@protoc_insertion_point(field_get:BlockSer.current_hash)
  return current_hash_;
}
inline void BlockSer::set_current_hash(::google::protobuf::int32 value) {
  
  current_hash_ = value;
  // @@protoc_insertion_point(field_set:BlockSer.current_hash)
}

// int32 previous_hash = 3;
inline void BlockSer::clear_previous_hash() {
  previous_hash_ = 0;
}
inline ::google::protobuf::int32 BlockSer::previous_hash() const {
  // @@protoc_insertion_point(field_get:BlockSer.previous_hash)
  return previous_hash_;
}
inline void BlockSer::set_previous_hash(::google::protobuf::int32 value) {
  
  previous_hash_ = value;
  // @@protoc_insertion_point(field_set:BlockSer.previous_hash)
}

// int32 time = 4;
inline void BlockSer::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 BlockSer::time() const {
  // @@protoc_insertion_point(field_get:BlockSer.time)
  return time_;
}
inline void BlockSer::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:BlockSer.time)
}

// -------------------------------------------------------------------

// FileSer

// repeated .BlockSer block = 1;
inline int FileSer::block_size() const {
  return block_.size();
}
inline void FileSer::clear_block() {
  block_.Clear();
}
inline const ::BlockSer& FileSer::block(int index) const {
  // @@protoc_insertion_point(field_get:FileSer.block)
  return block_.Get(index);
}
inline ::BlockSer* FileSer::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:FileSer.block)
  return block_.Mutable(index);
}
inline ::BlockSer* FileSer::add_block() {
  // @@protoc_insertion_point(field_add:FileSer.block)
  return block_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BlockSer >*
FileSer::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:FileSer.block)
  return &block_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BlockSer >&
FileSer::block() const {
  // @@protoc_insertion_point(field_list:FileSer.block)
  return block_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Serialization_2eproto__INCLUDED
